#!/usr/bin/env python3
"""Builds the .rst files that autodoc will use to generate the documentation."""
import sys
if len(sys.argv) > 1:
    requestName = sys.argv[1]
else:
    requestName = None
# Prose
filesText = ["workflow", "programs", "setup",
             "breakingChanges", "modelArchitectures",
             "countsLossReweighting", "pisa"]

filesDevelopment = ["philosophy", "changelog", "releaseChecklist"]

# Things that take a json
filesMajor = ["interpretFlat.py", "interpretPisa.py",
              "makePredictionsBed.py", "makePredictionsFasta.py",
              "motifScan.py", "motifSeqletCutoffs.py",
              "prepareBed.py", "prepareTrainingData.py",
              "trainCombinedModel.py",
              "trainSoloModel.py", "trainTransformationModel.py"]
# Things that take command-line arguments
filesMinor = ["lengthCalc.py", "makeLossPlots.py", "metrics.py", "motifAddQuantiles.py",
              "predictToBigwig.py", "shapToBigwig.py", "shapToNumpy.py",
              "showModel.py", "checkJson.py"]

# Libraries that can't be executed on their own
filesApi = ["bedUtils.py", "callbacks.py", "gaOptimize.py", "generators.py",
            "interpretUtils.py", "jaccard.py", "layers.py", "losses.py",
            "models.py", "motifUtils.py", "ushuffle.py", "utils.py",
            "schema.py"]

import os
if not os.path.exists("_generated"):
    os.mkdir("_generated")

# Always write a new header for the makefile.
# In a bit of an incestuous daisy-chain, this program generates
# a file called makeHeader in _generated, and then
# the makefile includes it.
# The makefile also has a rule to make makeHeader, which invokes
# this script. It's amazing that it works!
with open("_generated/makeHeader", "w") as fp:
    allTargets = []
    for fname in filesMajor + filesMinor + filesApi:
        fp.write("_generated/{0:s}.rst: ../src/{0:s}.py build.py\n\t./build.py {0:s}\n\n".
                 format(fname[:-3]))
        allTargets.append("_generated/{0:s}.rst".format(fname[:-3]))
    for fname in filesText + filesDevelopment:
        fp.write("_generated/{0:s}.rst: text/{0:s}.rst build.py\n\t./build.py {0:s}\n\n".
                 format(fname))
        allTargets.append("_generated/{0:s}.rst".format(fname))
    for fname in ["_generated/text.rst", "_generated/majorcli.rst",
                  "_generated/minorcli.rst", "_generated/api.rst",
                  "_generated/development.rst",
                  "index.rst"]:
        fp.write("{0:s}: build.py\n\t./build.py base\n\n".format(fname))
        allTargets.append("{0:s}".format(fname))
    fp.write("allGenerated = " + " ".join(allTargets) + "\n")


if requestName == "base":
    with open("_generated/text.rst", "w") as fp:
        fp.write(".. Autogenerated by build.py\n")
        fp.write("\n********\nOverview\n********\n\n")
        fp.write("\n.. toctree::\n    :maxdepth: 2\n\n")
        for file in filesText:
            fp.write("    {0:s}\n".format(file))


    # Generate the three .rst files with pages for each module.
    with open("_generated/majorcli.rst", "w") as fp:
        fp.write(".. Autogenerated by build.py\n")
        fp.write("\n********\nMain CLI\n********\n\n")
        fp.write("\n.. toctree::\n    :maxdepth: 2\n\n")
        for file in filesMajor:
            fp.write("    {0:s}\n".format(file[:-3]))

    with open("_generated/minorcli.rst", "w") as fp:
        fp.write(".. Autogenerated by build.py\n")
        fp.write("\n*********\nExtra CLI\n*********\n\n")
        fp.write("\n.. toctree::\n    :maxdepth: 2\n\n")
        for file in filesMinor:
            fp.write("    {0:s}\n".format(file[:-3]))

    with open("_generated/api.rst", "w") as fp:
        fp.write(".. Autogenerated by build.py\n")
        fp.write("\n***\nAPI\n***\n\n")
        fp.write("\n.. toctree::\n    :maxdepth: 2\n\n")
        for file in filesApi:
            fp.write("    {0:s}\n".format(file[:-3]))

    with open("_generated/development.rst", "w") as fp:
        fp.write(".. Autogenerated by build.py\n")
        fp.write("\n***********\nDevelopment\n***********\n\n")
        fp.write("\n.. toctree::\n    :maxdepth: 2\n\n")
        for file in filesDevelopment:
            fp.write("    {0:s}\n".format(file))

    # Generate a single .rst index
    with open("index.rst", "w") as fpBig:
        fpBig.write(".. Autogenerated by build.py\n\n")
        headerStr = "BPReveal documentation"
        fpBig.write("{0:s}\n{1:s}\n\n".format(headerStr, '=' * len(headerStr)))
        with open("text/title.rst", "r") as inFp:
            for line in inFp:
                fpBig.write(line)
        fpBig.write("\n.. toctree::\n    :maxdepth: 2\n")
        fpBig.write("\n")
        fpBig.write("    _generated/text\n")
        fpBig.write("    _generated/majorcli\n")
        fpBig.write("    _generated/minorcli\n")
        fpBig.write("    _generated/api\n")
        fpBig.write("    _generated/development\n")

        fpBig.write("\n\n*******\nIndices\n*******\n\n")
        fpBig.write("* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n")


# Generate a .rst file for every module.
for fname in filesMajor + filesMinor + filesApi:
    modName = fname[:-3]
    if modName == requestName:
        with open("_generated/" + modName + ".rst", "w") as fp:
            fp.write(".. Autogenerated by build.py\n")
            lineBreak = '=' * len(modName)
            fp.write("\n{0:s}\n{1:s}\n\n".format(modName, lineBreak))
            if fname in filesMajor:
                fp.write(".. automodule:: bpreveal.{0:s}\n    :members:\n\n".
                        format(modName))
                fp.write(".. highlight:: python\n\n")

                fp.write("SCHEMA\n------\n.. highlight:: json\n")
                fp.write(".. literalinclude:: ../../src/schematools/{0:s}.schema\n\n".
                         format(modName))
            elif fname in filesMinor:
                fp.write("HELP INFO\n---------\n\n")
                fp.write(".. highlight:: none\n\n")
                fp.write(".. argparse::\n")
                fp.write("    :module: bpreveal.{0:s}\n".format(modName))
                fp.write("    :func: getParser\n")
                fp.write("    :prog: {0:s}\n\n".format(modName))
                fp.write("USAGE\n-----\n\n")
                fp.write("\n.. highlight:: python\n\n")
                fp.write(".. automodule:: bpreveal.{0:s}\n    :members:\n\n".
                        format(modName))
            elif modName == "schema":
                fp.write(".. automodule:: bpreveal.{0:s}\n\n".
                        format(modName))
                fp.write("    .. autodata:: schemaMap(dict[str, Draft7Validator])\n")
                fp.write("        :annotation:\n\n")
                for majorFile in filesMajor:
                    fp.write("    .. autodata:: {0:s}(Draft7Validator)\n".format(majorFile[:-3]))
                    fp.write("        :annotation:\n\n")

            else:
                fp.write(".. automodule:: bpreveal.{0:s}\n    :members:\n\n".
                        format(modName))
            fp.write("\n.. raw:: latex\n\n    \\clearpage\n")
            fp.write("\n.. raw:: latex\n\n    \\clearpage\n")


# Now copy over the prose documentation.
#

for fname in filesText + filesDevelopment:
    if fname == requestName:
        with open("_generated/{0:s}.rst".format(fname), "w") as fp:
            with open("text/{0:s}.rst".format(fname), "r") as inFp:
                for line in inFp:
                    fp.write(line)
