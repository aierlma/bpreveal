#!/usr/bin/env python3
"""Builds the schema.py module."""
import sys
import json
with open(sys.argv[1], "w") as fp:
    fp.write('"""Auto-generated schema validators for the JSON files used by the main CLI."""\n')
    fp.write("# pylint: disable=line-too-long\n")
    fp.write("import json\n")
    fp.write("from jsonschema import Draft7Validator\n")
    fp.write("from referencing import Registry\n")
    fp.write("from referencing.jsonschema import DRAFT7\n\n")
    fp.write("# DO NOT EDIT THIS FILE - IT IS AUTO-GENERATED BY build.py\n")
    fp.write("# TO CHANGE A SCHEMA, EDIT THE CORRESPONDING .schema FILE\n")
    fp.write("# AND RUN make schemas OR make all IN THE src DIRECTORY.\n")
    docstrings = []
    for schemaFname in sys.argv[2:]:
        fp.write("_" + schemaFname + 'Schema = json.loads("""')
        with open("schematools/" + schemaFname + ".schema", "r") as sfp:
            jsonStr = json.dumps(json.load(sfp))
            fp.write(jsonStr)
        fp.write('""")  # noqa\n')
        fp.write("_" + schemaFname + "Schema['$id'] = 'https://example.com/"
                 "schema/" + schemaFname + "'\n")
    fp.write("_schemaStore = {")
    for schemaFname in sys.argv[2:]:
        fp.write("_{0:s}Schema['$id']: _{0:s}Schema,".format(schemaFname))
    fp.write('}\n')
    fp.write("_storeList = [(x, DRAFT7.create_resource(_schemaStore[x])) "
             "for x in _schemaStore.keys()]\n")
    fp.write("_registry = Registry().with_resources(_storeList)\n")
    # for schemaFname in sys.argv[2:]:
    #     fp.write(("_{0:s}Resolver = RefResolver.from_schema("
    #              "_{0:s}Schema, store=_schemaStore)\n").format(schemaFname))
    fp.write("\n\n")
    for schemaFname in sys.argv[2:]:
        fp.write(
            "{0:s}: Draft7Validator = Draft7Validator(_{0:s}Schema, registry=_registry)\n".
            format(schemaFname))
        docName = schemaFname
        if schemaFname in ["addNoise"]:
            docName = "tools." + docName
        fp.write('"""Validator for :py:mod:`{0:s}<bpreveal.{1:s}>`"""\n'.
                 format(schemaFname, docName))
    fp.write("schemaMap = {")
    for schemaFname in sys.argv[2:]:
        fp.write('"{0:s}": {0:s},'.format(schemaFname))
    fp.write('}\n')
    fp.write('"""A mapping from a string naming a BPReveal program to '
        'the corresponding schema.\n\n'
        'Usage::\n\n    schemaMap["prepareBed"](configJson)\n"""\n')
# Copyright 2022, 2023, 2024 Charles McAnany. This file is part of BPReveal. BPReveal is free software: You can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version. BPReveal is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with BPReveal. If not, see <https://www.gnu.org/licenses/>.  # noqa  # pylint: disable=line-too-long
