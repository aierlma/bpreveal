#!/usr/bin/env python3

import numpy as np
import h5py
import argparse
import logging
#This little utility takes the hdf5 files generated by interpretFlat.py and renders them as numpy arrays that can be fed to the tfmodisco-lite suite. 


def flipAndSave(inpAr, fname, dtype):
    ar = np.array(inpAr, dtype=dtype)
    transAr = np.transpose(ar, [0,2,1])
    logging.info("Saving {0:s}".format(fname))
    np.save(fname, transAr)

def main():
    parser = argparse.ArgumentParser(description="A little utility that takes the hdf5-format files generated by interpretFlat.py and saves them as numpy arrays suitable for tfmodisco-lite.")
    parser.add_argument("--h5", help="The name of the hdf5-format file generated by interpretFlat.py")
    parser.add_argument("--seqs", help="The name of the .npy-format file containing the one-hot-encoded sequences. This is an output.")
    parser.add_argument("--scores", help="The name of the .npy-format file containing the hypothetical importance scores. This is an output.")
    parser.add_argument("--verbose", help="Display progress messages.", action='store_true')

    args=parser.parse_args()
    if(args.verbose):
        logging.basicConfig(level=logging.INFO)
    else:
        logging.basicConfig(level=logging.WARNING)
    logging.info("Loading input file {0:s}.".format(args.h5))
    inFile = h5py.File(args.h5, "r")
    if(args.seqs is not None):
        flipAndSave(inFile["input_seqs"], args.seqs, np.int8)
    flipAndSave(inFile["hyp_scores"], args.scores, np.float32)
    logging.info("Done.")


if(__name__ == "__main__"):
    main()

