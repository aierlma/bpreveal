#!/usr/bin/env python3
import h5py
import pyBigWig
import numpy as np
import argparse

def writeBigWig(inH5, outFname):
    bwHeader = []
    for i, name in enumerate(inH5["chrom_names"].asstr()):
        bwHeader.append(("{0:s}".format(name), inH5['chrom_sizes'][i]))
    outBw = pyBigWig.open(outFname, 'w')
    outBw.addHeader(bwHeader)

    numRegions = inH5['coords_chrom'].shape[0]
    #Sort the regions. 
    regionOrder = sorted(range(numRegions), key = lambda x: (inH5['coords_chrom'][i], inH5['coords_start'][i]))
    startWritingAt = 0
    regionID = regionOrder[0]
    regionChrom = inH5['coords_chrom'][regionID].decode('utf-8')
    curChrom = regionChrom
    regionStart = inH5['coords_start'][regionID]
    regionStop = inH5['coords_end'][regionID]

    for regionNumber in range(numRegions):
        #Extract the appropriate region from the sorted list. 

        if(regionChrom != curChrom):
            curChrom = regionChrom
            startWritingAt = 0

        if(startWritingAt < regionStart):
            #The next region starts beyond the end 
            #of the previous one. Some bases will not be filled in.
            startWritingAt = regionStart
        #By default, write the whole region. 
        stopWritingAt = regionStop
        #As long as we aren't on the last region, check for overlaps.
        if(regionNumber < numRegions-1):
            nextRegion = regionOrder[regionNumber+1]
            nextChrom = inH5['coords_chrom'][nextRegion].decode('utf-8')
            nextStart = inH5['coords_start'][nextRegion]
            nextStop = inH5['coords_end'][nextRegion]
            if(nextChrom == regionChrom and nextStart < stopWritingAt):
                #The next region overlaps. So stop writing before then. 
                overlapSize = regionStop - nextStart
                stopWritingAt = stopWritingAt - overlapSize //2
        dataSliceStart = startWritingAt - regionStart
        dataSliceStop = stopWritingAt - regionStart
        
        #Okay, now it's time to actually do the thing to the data! 
        importances = inH5["projected_shap"]['seq'][regionID]
        profile = np.sum(importances, axis=0) #Add up all the bases to get a vector of projected importances. 
        #print("Adding at {0:d} - {1:d} ({2:d} - {3:d})".format(startWritingAt, stopWritingAt, dataSliceStart, dataSliceStop))
        vals = [float(x) for x in profile[dataSliceStart:dataSliceStop]]
        outBw.addEntries(regionChrom, 
                startWritingAt,
                values = vals,
                span=1, step=1)

        #Update the region. By pulling the first setting of the region variables out of the loop,
        #I avoid double-dipping to get those data from the H5. 
        startWritingAt = stopWritingAt
        regionID = nextRegion
        regionChrom = nextChrom
        regionStart = nextStart
        regionStop = nextStop
    outBw.close()

def main():
    parser = argparse.ArgumentParser(description='Take an hdf5-format file generated by the flat shap script and render it to a bigwig.')
    parser.add_argument("--h5", help='The name of the hdf5-format file to be read in.')
    parser.add_argument("--bw", help='The name of the bigwig file that should be written.')
    args = parser.parse_args()
    inH5 = h5py.File(args.h5, 'r')
    writeBigWig(inH5, args.bw)

if(__name__ == "__main__"):
    main()


