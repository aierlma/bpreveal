#!/usr/bin/env python3
"""Builds the .rst files that autodoc will use to generate the documentation."""

# Prose
filesText = ["philosophy", "workflow", "programs", "setup",
             "breakingChanges", "modelArchitectures",
             "countsLossReweighting", "pisa", "changelog"]

# Things that take a json
filesMajor = ["interpretFlat.py", "interpretPisa.py",
              "makePredictionsBed.py", "makePredictionsFasta.py",
              "motifScan.py", "motifSeqletCutoffs.py",
              "prepareBed.py", "prepareTrainingData.py",
              "trainCombinedModel.py",
              "trainSoloModel.py", "trainTransformationModel.py"]
# Things that take command-line arguments
filesMinor = ["lengthCalc.py", "makeLossPlots.py", "metrics.py", "motifAddQuantiles.py",
              "predictToBigwig.py", "shapToBigwig.py", "shapToNumpy.py",
              "showModel.py", "checkJson.py"]

# Libraries that can't be executed on their own
filesApi = ["bedUtils.py", "callbacks.py", "gaOptimize.py", "generators.py",
            "interpretUtils.py", "jaccard.py", "layers.py", "losses.py",
            "models.py", "motifUtils.py", "shap.py", "ushuffle.py", "utils.py",
            "schema.py"]

import os
if not os.path.exists("_generated"):
    os.mkdir("_generated")
if not os.path.exists("_generated/_templates"):
    os.mkdir("_generated/_templates")
if not os.path.exists("_generated/_static"):
    os.mkdir("_generated/_static")

with open("_generated/text.rst", "w") as fp:
    fp.write(".. Autogenerated by build.py\n")
    fp.write("\n========\nOverview\n========\n\n")
    fp.write("\n.. toctree::\n    :maxdepth: 2\n\n")
    for file in filesText:
        fp.write("    {0:s}\n".format(file))


# Generate the three .rst files with pages for each module.
with open("_generated/majorcli.rst", "w") as fp:
    fp.write(".. Autogenerated by build.py\n")
    fp.write("\n========\nMain CLI\n========\n\n")
    fp.write("\n.. toctree::\n    :maxdepth: 2\n\n")
    for file in filesMajor:
        fp.write("    {0:s}\n".format(file[:-3]))

with open("_generated/minorcli.rst", "w") as fp:
    fp.write(".. Autogenerated by build.py\n")
    fp.write("\n=========\nExtra CLI\n=========\n\n")
    fp.write("\n.. toctree::\n    :maxdepth: 2\n\n")
    for file in filesMinor:
        fp.write("    {0:s}\n".format(file[:-3]))

with open("_generated/api.rst", "w") as fp:
    fp.write(".. Autogenerated by build.py\n")
    fp.write("\n===\nAPI\n===\n\n")
    fp.write("\n.. toctree::\n    :maxdepth: 2\n\n")
    for file in filesApi:
        fp.write("    {0:s}\n".format(file[:-3]))



# Generate a single .rst index
with open("index.rst", "w") as fpBig:
    fpBig.write(".. Autogenerated by build.py\n\n")
    headerStr = "BPReveal documentation"
    fpBig.write("{0:s}\n{1:s}\n\n".format(headerStr, '=' * len(headerStr)))
    with open("text/title.rst", "r") as inFp:
        for line in inFp:
            fpBig.write(line)
    #with open("text/tableOfContents.rst", "r") as inFp:
    #    for line in inFp:
    #        fpBig.write(line)
    fpBig.write("\n.. toctree::\n    :maxdepth: 2\n")
    # fpBig.write("    :hidden:\n")
    fpBig.write("\n")
    fpBig.write("    _generated/text\n")
    fpBig.write("    _generated/majorcli\n")
    fpBig.write("    _generated/minorcli\n")
    fpBig.write("    _generated/api\n")

    fpBig.write("\n\nIndices\n=======\n\n")
    fpBig.write("* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n")


# Generate a .rst file for every module.
for fname in filesMajor + filesMinor + filesApi:
    modName = fname[:-3]
    with open("_generated/" + modName + ".rst", "w") as fp:
        fp.write(".. Autogenerated by build.py\n")
        lineBreak = '=' * len(modName)
        fp.write("\n{0:s}\n{1:s}\n\n".format(modName, lineBreak))
        if fname in filesMajor:
            fp.write(".. automodule:: bpreveal.{0:s}\n    :members:\n\n".
                     format(modName))
            fp.write(".. highlight:: python\n\n")

            fp.write("SCHEMA\n------\n.. highlight:: json\n")
            fp.write(".. literalinclude:: ../../src/schematools/{0:s}.schema\n\n".format(modName))
        elif fname in filesMinor:
            fp.write("HELP INFO\n---------\n\n")
            fp.write(".. highlight:: none\n\n")
            fp.write(".. argparse::\n")
            fp.write("    :module: bpreveal.{0:s}\n".format(modName))
            fp.write("    :func: getParser\n")
            fp.write("    :prog: {0:s}\n\n".format(modName))
            fp.write("USAGE\n-----\n\n")
            fp.write("\n.. highlight:: python\n\n")
            fp.write(".. automodule:: bpreveal.{0:s}\n    :members:\n\n".
                     format(modName))
        elif modName == "schema":
            fp.write(".. automodule:: bpreveal.{0:s}\n\n".
                     format(modName))
            fp.write("    .. autodata:: schemaMap(dict[str, Draft7Validator])\n")
            fp.write("        :annotation:\n\n")
            for majorFile in filesMajor:
                fp.write("    .. autodata:: {0:s}(Draft7Validator)\n".format(majorFile[:-3]))
                fp.write("        :annotation:\n\n")

        else:
            fp.write(".. automodule:: bpreveal.{0:s}\n    :members:\n\n".
                     format(modName))
        fp.write("\n.. raw:: latex\n\n    \\clearpage\n")
        fp.write("\n.. raw:: latex\n\n    \\clearpage\n")

# Now copy over the prose documentation.
#
for fname in filesText:
    with open("_generated/{0:s}.rst".format(fname), "w") as fp:
        with open("text/{0:s}.rst".format(fname), "r") as inFp:
            for line in inFp:
                fp.write(line)


