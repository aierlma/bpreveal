#!/usr/bin/env python3
import os
os.environ["COLUMNS"] = "40"
filesMajor = ["interpretFlat.py", "interpretPisa.py",
              "makePredictionsBed.py", "makePredictionsFasta.py",
              "motifScan.py", "motifSeqletCutoffs.py",
              "prepareBed.py", "prepareTrainingData.py",
              "trainCombinedModel.py",
              "trainSoloModel.py", "trainTransformationModel.py"]

filesMinor = ["lengthCalc.py", "makeLossPlots.py", "metrics.py", "motifAddQuantiles.py",
              "predictToBigwig.py", "shapToBigwig.py", "shapToNumpy.py",
              "showModel.py"]


filesApi = ["bedUtils.py", "callbacks.py", "gaOptimize.py", "generators.py",
            "interpretUtils.py", "jaccard.py", "layers.py", "losses.py",
            "models.py", "motifUtils.py", "shap.py", "ushuffle.py", "utils.py"]

# filesApi = []
print("Callback triggered.")

import os
fileNamesForBnf = os.listdir("../doc/bnf/")
filesForBnf = []
if not os.path.exists("api"):
    os.mkdir("api")
for fn in fileNamesForBnf:
    base, _ = fn.split('.')
    filesForBnf.append(base)

with open("api/majorcli.rst", "w") as fp:
    fp.write(".. Autogenerated by build.py\n")
    fp.write("\nMAIN CLI\n========\n\n")
    fp.write("\n.. toctree::\n    :maxdepth: 2\n\n")
    for file in filesMajor:
        fp.write("    {0:s}\n".format(file[:-3]))

with open("api/minorcli.rst", "w") as fp:
    fp.write(".. Autogenerated by build.py\n")
    fp.write("\nMISC CLI\n========\n\n")
    fp.write("\n.. toctree::\n    :maxdepth: 2\n\n")
    for file in filesMinor:
        fp.write("    {0:s}\n".format(file[:-3]))

# for file in filesMinor:
#    helpInfo = subprocess.run([file[:-3], "--help"],
#                              capture_output = True)
#    with open("api/help_{0:s}.txt".format(file[:-3]), "wb") as fp:
#        fp.write(helpInfo.stdout)

with open("api/api.rst", "w") as fp:
    fp.write(".. Autogenerated by build.py\n")
    fp.write("\nAPI\n========\n\n")
    fp.write("\n.. toctree::\n    :maxdepth: 2\n\n")
    for file in filesApi:
        fp.write("    {0:s}\n".format(file[:-3]))

with open("index.rst", "w") as fpBig:
    fpBig.write(".. Autogenerated by build.py\n\n")
    headerStr = "BPReveal documentation"
    fpBig.write("{0:s}\n{1:s}\n\n".format(headerStr, '=' * len(headerStr)))
    fpBig.write("\n.. toctree::\n    :maxdepth: 2\n\n")
    fpBig.write("    api/majorcli\n")
    fpBig.write("    api/minorcli\n")
    fpBig.write("    api/api\n")

    fpBig.write("\n\nIndices\n=======\n\n")
    fpBig.write("* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n")


for fname in filesMajor + filesMinor + filesApi:
    modName = fname[:-3]
    with open("api/" + modName + ".rst", "w") as fp:
        fp.write(".. Autogenerated by build.py\n")
        lineBreak = '=' * len(modName)
        fp.write("\n{0:s}\n{1:s}\n\n".format(modName, lineBreak))
        if modName in filesForBnf:
            #fp.write("BNF\n---\n\n")
            #fp.write(".. highlight:: none\n\n")
            #fp.write(".. literalinclude:: ../../doc/bnf/{0:s}.bnf\n\n".format(modName))
            fp.write(".. automodule:: bpreveal.{0:s}\n    :members:\n\n".
                     format(modName))
            fp.write(".. highlight:: python\n\n")

            fp.write("SCHEMA\n------\n.. highlight:: json\n")
            fp.write(".. literalinclude:: ../../src/schema/{0:s}.schema\n\n".format(modName))
        elif fname in filesMinor:
            fp.write("HELP INFO\n---------\n\n")
            fp.write(".. highlight:: none\n\n")
            # fp.write(".. literalinclude:: help_{0:s}.txt\n\n".format(modName))
            fp.write(".. argparse::\n")
            fp.write("    :module: bpreveal.{0:s}\n".format(modName))
            fp.write("    :func: getParser\n")
            fp.write("    :prog: {0:s}\n\n".format(modName))
            fp.write("API\n---\n\n.. highlight:: python\n\n")
            fp.write(".. automodule:: bpreveal.{0:s}\n    :members:\n\n".
                     format(modName))
        else:
            fp.write(".. automodule:: bpreveal.{0:s}\n    :members:\n\n".
                     format(modName))
